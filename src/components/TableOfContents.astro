---
interface Heading {
  id: string;
  text: string;
  level: number;
}

interface Props {
  headings: Heading[];
}

const { headings } = Astro.props;

// 헤딩이 없으면 컴포넌트를 렌더링하지 않음
const hasHeadings = headings && headings.length > 0;
---

{hasHeadings && (
  <aside class="table-of-contents">
    <nav class="toc-nav">
      <h3 class="toc-title">목차</h3>
      <ul class="toc-list">
        {headings.map((heading) => (
          <li class={`toc-item toc-level-${heading.level}`}>
            <a href={`#${heading.id}`} class="toc-link" data-heading-id={heading.id}>
              {heading.text}
            </a>
          </li>
        ))}
      </ul>
    </nav>
  </aside>
)}

{hasHeadings && (
  <script>
    // TOC 기능 초기화
    function initTableOfContents() {
      const tocLinks = document.querySelectorAll('.toc-link');
      const headings = document.querySelectorAll('h1[id], h2[id], h3[id]');
      
      if (tocLinks.length === 0 || headings.length === 0) return;

      // 부드러운 스크롤 및 URL 업데이트
      tocLinks.forEach(link => {
        link.addEventListener('click', (e) => {
          e.preventDefault();
          const targetId = link.getAttribute('href')?.substring(1);
          const targetElement = document.getElementById(targetId);
          
          if (targetElement) {
            // 부드러운 스크롤
            targetElement.scrollIntoView({ 
              behavior: 'smooth',
              block: 'start'
            });
            
            // URL 업데이트 (히스토리에 추가하지 않음)
            history.replaceState(null, '', `#${targetId}`);
          }
        });
      });

      // Intersection Observer로 활성 섹션 추적
      const observerOptions = {
        root: null,
        rootMargin: '-20% 0px -35% 0px', // 상단 20%, 하단 35% 여백
        threshold: 0
      };

      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          const id = entry.target.id;
          const tocLink = document.querySelector(`[data-heading-id="${id}"]`);
          
          if (entry.isIntersecting) {
            // 모든 활성 상태 제거
            tocLinks.forEach(link => link.classList.remove('active'));
            // 현재 섹션 활성화
            if (tocLink) {
              tocLink.classList.add('active');
              // URL 업데이트
              history.replaceState(null, '', `#${id}`);
            }
          }
        });
      }, observerOptions);

      // 모든 헤딩 관찰 시작
      headings.forEach(heading => observer.observe(heading));

      // 페이지 로드 시 URL 해시 처리
      function handleInitialHash() {
        const hash = window.location.hash;
        if (hash) {
          const targetElement = document.getElementById(hash.substring(1));
          if (targetElement) {
            setTimeout(() => {
              targetElement.scrollIntoView({ 
                behavior: 'smooth',
                block: 'start'
              });
            }, 100);
          }
        }
      }

      // 초기 해시 처리
      handleInitialHash();

      // 뒤로가기/앞으로가기 시 해시 처리
      window.addEventListener('popstate', handleInitialHash);
    }

    // DOM 로드 후 실행
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initTableOfContents);
    } else {
      initTableOfContents();
    }
  </script>
)}

<style>
  .table-of-contents {
    position: fixed;
    top: 120px; /* 플로팅 네비게이션 고려 */
    left: calc(50vw + 400px + 3rem); /* 화면 중앙 + 콘텐츠 절반 크기 + 간격 */
    width: 250px;
    max-height: calc(100vh - 140px);
    overflow-y: auto;
    z-index: 10;
  }

  .toc-nav {
    background: rgba(249, 249, 249, 0.9);
    border: 1px solid #e0e0e0;
    border-radius: 8px;
    padding: 1.5rem;
    backdrop-filter: blur(8px);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  }

  .toc-title {
    margin: 0 0 1rem 0;
    font-size: 1rem;
    font-weight: 600;
    color: #333;
    border-bottom: 1px solid #e0e0e0;
    padding-bottom: 0.5rem;
  }

  .toc-list {
    margin: 0;
    padding: 0;
    list-style: none;
  }

  .toc-item {
    margin: 0;
  }

  .toc-link {
    display: block;
    color: #666;
    text-decoration: none;
    padding: 0.3rem 0;
    font-size: 0.9rem;
    line-height: 1.4;
    border-left: 2px solid transparent;
    padding-left: 0.5rem;
    margin-left: -0.5rem;
    transition: all 0.2s ease;
  }

  .toc-link:hover {
    color: #007acc;
    border-left-color: #007acc;
  }

  .toc-link.active {
    color: #007acc;
    border-left-color: #007acc;
    font-weight: 500;
  }

  /* 헤딩 레벨별 들여쓰기 */
  .toc-level-1 .toc-link {
    font-weight: 500;
  }

  .toc-level-2 .toc-link {
    padding-left: 1rem;
    margin-left: -1rem;
    font-size: 0.85rem;
  }

  .toc-level-3 .toc-link {
    padding-left: 1.5rem;
    margin-left: -1.5rem;
    font-size: 0.8rem;
    color: #888;
  }

  /* 다크모드 스타일 */
  :global(html[data-theme="dark"]) .toc-nav {
    background: rgba(45, 45, 45, 0.95);
    border-color: #555;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
  }

  :global(html[data-theme="dark"]) .toc-title {
    color: #f0f0f0;
    border-bottom-color: #555;
  }

  :global(html[data-theme="dark"]) .toc-link {
    color: #b4b4b4;
  }

  :global(html[data-theme="dark"]) .toc-link:hover {
    color: #1e90ff;
    border-left-color: #1e90ff;
  }

  :global(html[data-theme="dark"]) .toc-link.active {
    color: #1e90ff;
    border-left-color: #1e90ff;
  }

  :global(html[data-theme="dark"]) .toc-level-3 .toc-link {
    color: #999;
  }

  /* 화면이 좁을 때 TOC 숨김 */
  @media (max-width: 1150px) {
    .table-of-contents {
      display: none;
    }
  }

  /* 다양한 화면 크기에서 TOC 위치 조정 */
  @media (min-width: 1200px) {
    .table-of-contents {
      left: calc(50vw + 420px);
    }
  }

  @media (min-width: 1400px) {
    .table-of-contents {
      left: calc(50vw + 450px);
    }
  }
</style>